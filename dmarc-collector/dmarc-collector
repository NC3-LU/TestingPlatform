#!/usr/bin/python3
import configparser
import email.parser
import email.utils
import fnmatch
import gzip
import io
import os
import sys
import syslog
import uuid
import zipfile

import requests

config = {
    "collector": {
        "DMARC_API_URL": "",
        "DMARC_API_KEY": "",
        "DMARC_LOG_DIR": "/var/tmp/",
    }
}
if len(sys.argv) > 1 and os.path.exists(sys.argv[1]):
    config = configparser.ConfigParser(
        interpolation=configparser.ExtendedInterpolation()
    )
    config.read(sys.argv[1])

DMARC_API_URL = os.environ.get("DMARC_API_URL", config["collector"]["DMARC_API_URL"])
DMARC_API_KEY = os.environ.get("DMARC_API_KEY", config["collector"]["DMARC_API_KEY"])
DMARC_LOG_DIR = os.environ.get("DMARC_LOG_DIR", config["collector"]["DMARC_LOG_DIR"])
UUID = str(uuid.uuid4())
syslog.openlog(f"dmarc-collector[{UUID}]", 0, syslog.LOG_MAIL)

input_mail = sys.stdin
postfix_from = input_mail.readline().strip().split(" ")[1]

message = email.parser.Parser().parse(input_mail)

from_address = email.utils.parseaddr(message["From"])[1]
to_addresses = [a[1] for a in email.utils.getaddresses(message.get_all("To", []))]
syslog.syslog(f"got message from {from_address}")

for part in message.walk():
    dmarc_xml_report = None
    cd = part.get("Content-Disposition")
    if cd and cd.strip().lower().startswith("attachment"):
        if "application/zip" in part.get("Content-Type"):
            payload = part.get_payload(decode=True)
            dmarc_ar = io.BytesIO(payload)
            zf = zipfile.ZipFile(dmarc_ar, "r")
            for name in zf.namelist():
                if fnmatch.fnmatch(name, "*.xml"):
                    dmarc_xml_report = zf.read(name)
        if "application/gzip" in part.get("Content-Type"):
            payload = part.get_payload(decode=True)
            dmarc_ar = io.BytesIO(payload)
            gzf = gzip.GzipFile(fileobj=dmarc_ar)
            dmarc_xml_report = gzf.read()
        if "text/xml" in part.get("Content-Type"):
            dmarc_xml_report = part.get_payload(decode=True)

        logfile = open(os.path.join(DMARC_LOG_DIR, "dmarc-collector.log"), "a")
        logfile.write(UUID)
        logfile.write("\n")
        logfile.write(dmarc_xml_report.decode("utf-8"))
        logfile.write("\n")
        logfile.close()

data = {"report": dmarc_xml_report}
params = {"from": from_address, "to": to_addresses, "api-key": DMARC_API_KEY}
session = requests.Session()
session.verify = False
session.post(url=DMARC_API_URL, params=params, data=data)
